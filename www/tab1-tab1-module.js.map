{"version":3,"sources":["webpack:///./src/app/tab1/tab1.module.ts","webpack:///./src/app/tab1/tab1.page.html","webpack:///./src/app/tab1/tab1.page.scss","webpack:///./src/app/tab1/tab1.page.ts"],"names":[],"mappings":"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","file":"tab1-tab1-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { LoginPage } from './tab1.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: LoginPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [LoginPage]\n})\nexport class LoginPageModule {}\n","module.exports = \"\\n<ion-header>\\n  <ion-toolbar>\\n    <ion-title>\\n      Planet X\\n    </ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content class=\\\"login-content\\\" padding>\\n  <ion-row>\\n    <ion-col>\\n      <h1 class=\\\"logo\\\">LOGO</h1>\\n      <p class=\\\"description\\\">Google Login - Ionic 4 App.</p>\\n    </ion-col>\\n  </ion-row>\\n  <ion-row>\\n    <ion-col>\\n      <ion-button class=\\\"log-in-button\\\" color=\\\"danger\\\" expand=\\\"block\\\" (click)=\\\"doGoogleLogin()\\\">\\n        LOG IN WITH GOOGLE\\n      </ion-button>\\n    </ion-col>\\n  </ion-row>\\n</ion-content>\\n\"","module.exports = \".welcome-card ion-img {\\n  max-height: 35vh;\\n  overflow: hidden; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9hYXJvbm5tZWRpYS9Eb2N1bWVudHMvUm9vcGFrL215QXBwL3NyYy9hcHAvdGFiMS90YWIxLnBhZ2Uuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLGdCQUFnQjtFQUNoQixnQkFBZ0IsRUFBQSIsImZpbGUiOiJzcmMvYXBwL3RhYjEvdGFiMS5wYWdlLnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIud2VsY29tZS1jYXJkIGlvbi1pbWcge1xuICBtYXgtaGVpZ2h0OiAzNXZoO1xuICBvdmVyZmxvdzogaGlkZGVuO1xufVxuIl19 */\"","import { Component } from '@angular/core';\nimport { GooglePlus } from '@ionic-native/google-plus/ngx';\nimport { NativeStorage } from '@ionic-native/native-storage/ngx';\nimport { LoadingController, AlertController, Platform } from '@ionic/angular';\nimport { Router } from '@angular/router';\nimport { environment } from '../../environments/environment';\n\n@Component({\n  selector: 'app-tab1',\n  templateUrl: './tab1.page.html',\n  styleUrls: ['./tab1.page.scss'],\n})\nexport class LoginPage {\n\n  constructor(\n    private googlePlus: GooglePlus,\n    private nativeStorage: NativeStorage,\n    public loadingController: LoadingController,\n    private router: Router,\n    private platform: Platform,\n    public alertController: AlertController\n  ) { }\n\n  async doGoogleLogin(){\n    const loading = await this.loadingController.create({\n      message: 'Please wait...'\n    });\n    this.presentLoading(loading);\n    this.googlePlus.login({\n      'scopes': '', // optional - space-separated list of scopes, If not included or empty, defaults to `profile` and `email`.\n      'webClientId': environment.googleWebClientId, // optional - clientId of your Web application from Credentials settings of your project - On Android, this MUST be included to get an idToken. On iOS, it is not required.\n      'offline': true, // Optional, but requires the webClientId - if set to true the plugin will also return a serverAuthCode, which can be used to grant offline access to a non-Google server\n      })\n      .then(user => {\n        //save user data on the native storage\n        this.nativeStorage.setItem('google_user', {\n          name: user.displayName,\n          email: user.email,\n          picture: user.imageUrl\n        })\n        .then(() => {\n           this.router.navigate([\"/user\"]);\n        }, (error) => {\n          console.log(error);\n        })\n        loading.dismiss();\n      }, err => {\n        console.log(err);\n        if(!this.platform.is('cordova')){\n          this.presentAlert();\n        }\n        loading.dismiss();\n      })\n  }\n\n  async presentAlert() {\n    const alert = await this.alertController.create({\n       message: 'Cordova is not available on desktop. Please try this in a real device or in an emulator.',\n       buttons: ['OK']\n     });\n\n    await alert.present();\n  }\n\n\n  async presentLoading(loading) {\n    return await loading.present();\n  }\n\n}\n"],"sourceRoot":""}